from __future__ import annotations
import sapien.core.pysapien.simsense
import typing
import numpy
_Shape = typing.Tuple[int, ...]

__all__ = [
    "DepthSensorEngine"
]


class DepthSensorEngine():
    @typing.overload
    def __init__(self, arg0: int, arg1: int, arg2: float, arg3: float, arg4: float, arg5: float, arg6: bool, arg7: int, arg8: int, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: int, arg15: int, arg16: int, arg17: numpy.ndarray[numpy.float32], arg18: numpy.ndarray[numpy.float32], arg19: numpy.ndarray[numpy.float32], arg20: numpy.ndarray[numpy.float32]) -> None: ...
    @typing.overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: float, arg5: float, arg6: float, arg7: float, arg8: bool, arg9: int, arg10: int, arg11: int, arg12: int, arg13: int, arg14: int, arg15: int, arg16: int, arg17: int, arg18: int, arg19: numpy.ndarray[numpy.float32], arg20: numpy.ndarray[numpy.float32], arg21: numpy.ndarray[numpy.float32], arg22: numpy.ndarray[numpy.float32], arg23: numpy.ndarray[numpy.float32], arg24: numpy.ndarray[numpy.float32], arg25: numpy.ndarray[numpy.float32], arg26: float, arg27: float, arg28: float, arg29: bool) -> None: ...
    def _set_census_window_size(self, arg0: int, arg1: int) -> None: ...
    def _set_lr_max_diff(self, arg0: int) -> None: ...
    def _set_matching_block_size(self, arg0: int, arg1: int) -> None: ...
    def _set_penalties(self, arg0: int, arg1: int) -> None: ...
    def _set_uniqueness_ratio(self, arg0: int) -> None: ...
    def compute(self, arg0: numpy.ndarray[numpy.uint8], arg1: numpy.ndarray[numpy.uint8]) -> numpy.ndarray[numpy.float32]: ...
    pass

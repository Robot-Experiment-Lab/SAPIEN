from __future__ import annotations
import sapien.core.pysapien.simsense
import typing
import numpy
_Shape = typing.Tuple[int, ...]

__all__ = [
    "DepthSensorEngine"
]


class DepthSensorEngine():
    @typing.overload
    def __init__(self, arg0: int, arg1: int, arg2: float, arg3: float, arg4: float, arg5: float, arg6: int, arg7: float, arg8: float, arg9: float, arg10: float, arg11: bool, arg12: int, arg13: int, arg14: int, arg15: int, arg16: int, arg17: int, arg18: int, arg19: int, arg20: int, arg21: int, arg22: numpy.ndarray[numpy.float32], arg23: numpy.ndarray[numpy.float32], arg24: numpy.ndarray[numpy.float32], arg25: numpy.ndarray[numpy.float32], arg26: float, arg27: float, arg28: float, arg29: float, arg30: float) -> None: ...
    @typing.overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: float, arg5: float, arg6: float, arg7: float, arg8: int, arg9: float, arg10: float, arg11: float, arg12: float, arg13: bool, arg14: int, arg15: int, arg16: int, arg17: int, arg18: int, arg19: int, arg20: int, arg21: int, arg22: int, arg23: int, arg24: numpy.ndarray[numpy.float32], arg25: numpy.ndarray[numpy.float32], arg26: numpy.ndarray[numpy.float32], arg27: numpy.ndarray[numpy.float32], arg28: numpy.ndarray[numpy.float32], arg29: numpy.ndarray[numpy.float32], arg30: numpy.ndarray[numpy.float32], arg31: float, arg32: float, arg33: float, arg34: bool, arg35: float, arg36: float, arg37: float, arg38: float, arg39: float) -> None: ...
    @typing.overload
    def compute(self, arg0: capsule, arg1: capsule) -> None: ...
    @typing.overload
    def compute(self, arg0: numpy.ndarray[numpy.uint8], arg1: numpy.ndarray[numpy.uint8]) -> None: ...
    def get_dl_tensor(self) -> capsule: ...
    def get_ndarray(self) -> numpy.ndarray[numpy.float32]: ...
    def get_point_cloud_ndarray(self) -> numpy.ndarray[numpy.float32]: ...
    def get_rgb_point_cloud_ndarray(self, arg0: capsule) -> numpy.ndarray[numpy.float32]: ...
    def set_census_window_size(self, arg0: int, arg1: int) -> None: ...
    def set_ir_noise_parameters(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def set_lr_max_diff(self, arg0: int) -> None: ...
    def set_matching_block_size(self, arg0: int, arg1: int) -> None: ...
    def set_penalties(self, arg0: int, arg1: int) -> None: ...
    def set_uniqueness_ratio(self, arg0: int) -> None: ...
    pass
